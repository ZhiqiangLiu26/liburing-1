From 5de2450bb24cb732cb8bce52a9edec9f82f2547b Mon Sep 17 00:00:00 2001
From: Jens Axboe <axboe@kernel.dk>
Date: Wed, 8 Jul 2020 19:25:55 -0600
Subject: [PATCH] test/cq-overflow-peek

Add test case for missing CQ flush when using peek.

Signed-off-by: Jens Axboe <axboe@kernel.dk>
---
 test/Makefile           |  4 +--
 test/cq-overflow-peek.c | 82 +++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 84 insertions(+), 2 deletions(-)
 create mode 100644 test/cq-overflow-peek.c

diff --git a/test/Makefile b/test/Makefile
index ff4d4b8..fea3ecd 100644
--- a/test/Makefile
+++ b/test/Makefile
@@ -21,7 +21,7 @@ all_targets += poll poll-cancel ring-leak fsync io_uring_setup io_uring_register
 		file-update accept-reuse poll-v-poll fadvise madvise \
 		short-read openat2 probe shared-wq personality eventfd \
 		send_recv eventfd-ring across-fork sq-poll-kthread splice \
-		lfs-openat lfs-openat-write
+		lfs-openat lfs-openat-write cq-overflow-peek
 
 include ../Makefile.quiet
 
@@ -53,7 +53,7 @@ test_srcs := poll.c poll-cancel.c ring-leak.c fsync.c io_uring_setup.c \
 	file-update.c accept-reuse.c poll-v-poll.c fadvise.c \
 	madvise.c short-read.c openat2.c probe.c shared-wq.c \
 	personality.c eventfd.c eventfd-ring.c across-fork.c sq-poll-kthread.c \
-	splice.c lfs-openat.c lfs-openat-write.c
+	splice.c lfs-openat.c lfs-openat-write.c cq-overflow-peek.c
 
 ifdef CONFIG_HAVE_STATX
 test_srcs += statx.c
diff --git a/test/cq-overflow-peek.c b/test/cq-overflow-peek.c
new file mode 100644
index 0000000..72b6768
--- /dev/null
+++ b/test/cq-overflow-peek.c
@@ -0,0 +1,82 @@
+/*
+ * Check if the kernel sets IORING_SQ_CQ_OVERFLOW so that peeking events
+ * still enter the kernel to flush events, if the CQ side is overflown.
+ */
+#include <stdio.h>
+#include <string.h>
+#include <assert.h>
+#include "liburing.h"
+
+static int test_cq_overflow(struct io_uring *ring)
+{
+	struct io_uring_cqe *cqe;
+	struct io_uring_sqe *sqe;
+	unsigned flags;
+	int issued = 0;
+	int ret = 0;
+
+	do {
+		sqe = io_uring_get_sqe(ring);
+		if (!sqe) {
+			fprintf(stderr, "get sqe failed\n");
+			goto err;
+		}
+		ret = io_uring_submit(ring);
+		if (ret <= 0) {
+			if (ret != -EBUSY)
+				fprintf(stderr, "sqe submit failed: %d\n", ret);
+			break;
+		}
+		issued++;
+	} while (ret > 0);
+
+	assert(ret == -EBUSY);
+
+	flags = IO_URING_READ_ONCE(*ring->sq.kflags);
+	if (!(flags & IORING_SQ_CQ_OVERFLOW)) {
+		fprintf(stdout, "OVERFLOW not set on -EBUSY, skipping\n");
+		goto done;
+	}
+
+	while (issued) {
+		ret = io_uring_peek_cqe(ring, &cqe);
+		if (ret) {
+			if (ret != -EAGAIN) {
+				fprintf(stderr, "peek completion failed: %s\n",
+					strerror(ret));
+				break;
+			}
+			continue;
+		}
+		io_uring_cqe_seen(ring, cqe);
+		issued--;
+	}
+
+done:
+	return 0;
+err:
+	return 1;
+}
+
+int main(int argc, char *argv[])
+{
+	int ret;
+	struct io_uring ring;
+
+	if (argc > 1)
+		return 0;
+
+	ret = io_uring_queue_init(16, &ring, 0);
+	if (ret) {
+		fprintf(stderr, "ring setup failed: %d\n", ret);
+		return 1;
+	}
+
+	ret = test_cq_overflow(&ring);
+	if (ret) {
+		fprintf(stderr, "test_cq_overflow failed\n");
+		return 1;
+	}
+
+	return 0;
+}
-- 
1.8.3.1

