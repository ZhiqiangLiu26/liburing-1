From dc14e30a086082b6aebc3130948e2453e3bd3b2a Mon Sep 17 00:00:00 2001
From: Jens Axboe <axboe@kernel.dk>
Date: Mon, 2 Mar 2020 08:33:17 -0700
Subject: [PATCH 3/3] __io_uring_get_cqe: fix spurious -EAGAIN

A previous patch always cleared the number to wait for once we'd done
on io_uring_enter(), but we need to be sure that we've actually waited
for the right amount before doing so. Check this by matching the
return value with what we asked to submit - if it matches, we know we
can safely clear 'wait_nr'.

We also need to ensure that the original wait_nr is retained for the
peek test.

Fixes: 8a031500a304 ("__io_uring_get_cqe: eliminate unnecessary io_uring_enter() syscalls")
Signed-off-by: Jens Axboe <axboe@kernel.dk>
---
 src/queue.c | 11 ++++++++---
 1 file changed, 8 insertions(+), 3 deletions(-)

diff --git a/src/queue.c b/src/queue.c
index 16edd16..de2d002 100644
--- a/src/queue.c
+++ b/src/queue.c
@@ -35,6 +35,7 @@ int __io_uring_get_cqe(struct io_uring *ring, struct io_uring_cqe **cqe_ptr,
 		       unsigned submit, unsigned wait_nr, sigset_t *sigmask)
 {
 	struct io_uring_cqe *cqe = NULL;
+	const int to_wait = wait_nr;
 	int ret = 0, err;
 
 	do {
@@ -43,7 +44,7 @@ int __io_uring_get_cqe(struct io_uring *ring, struct io_uring_cqe **cqe_ptr,
 		err = __io_uring_peek_cqe(ring, &cqe);
 		if (err)
 			break;
-		if (!cqe && !wait_nr && !submit) {
+		if (!cqe && !to_wait && !submit) {
 			err = -EAGAIN;
 			break;
 		}
@@ -56,10 +57,14 @@ int __io_uring_get_cqe(struct io_uring *ring, struct io_uring_cqe **cqe_ptr,
 						   wait_nr, flags, sigmask);
 		if (wait_nr)
 			wait_nr = 0;
-		if (ret < 0)
+		if (ret < 0) {
 			err = -errno;
-		else
+		} else if (ret == submit) {
+			submit = 0;
+			wait_nr = 0;
+		} else {
 			submit -= ret;
+		}
 		if (cqe)
 			break;
 	} while (!err);
-- 
1.8.3.1

